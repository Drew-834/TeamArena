@page "/weeklytracker"
@namespace GameScoreboard.Pages
@using GameScoreboard.Models
@using GameScoreboard.Services
@using GameScoreboard.Data
@using System.Text.Json
@using System.IO

@inject IDataService DataService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject AppState AppState

@* TODO: Inject a Toast Notification service for user feedback *@
<!-- Remove both EPPlus and ClosedXML - they won't work well in Blazor WASM -->
<div class="bg-gray-900 min-h-screen text-white p-8">
    
    @if (!_isAuthenticated)
    {
        <div id="password-modal" class="fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50 transition-opacity duration-500 @(_showPasswordModal ? "opacity-100" : "opacity-0 pointer-events-none")">
            <div class="bg-gray-800 p-8 rounded-lg shadow-xl border border-purple-500 transform transition-transform duration-300 ease-out @(_showPasswordModal ? "scale-100 opacity-100" : "scale-95 opacity-0")">
                <h2 class="text-2xl font-bold text-purple-400 mb-4">Enter Admin Password</h2>
                 <div class="mb-4">
                     <label for="password-input" class="block text-sm font-medium text-gray-300 mb-1">Admin Password:</label>
                     <input type="password" id="password-input" 
                            @bind="PasswordInputValue" 
                            @bind:event="oninput" 
                            @onkeydown="HandlePasswordInputKeydown" 
                            class="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent placeholder-gray-500" 
                            placeholder="Password" />
                 </div>
                @if (!string.IsNullOrEmpty(_passwordError))
                {
                    <p class="text-red-500 text-sm mb-4">@_passwordError</p>
                }
                 <button @onclick="CheckPassword" 
                         class="w-full px-4 py-2 bg-blue-600 hover:bg-blue-500 text-white rounded-md font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-800 focus:ring-blue-500">
                     Authenticate
                 </button>
            </div>
        </div>
    }
    else
    {
        <div class="flex flex-col md:flex-row gap-8">
            <!-- Main Content Area (Grid, Selection) -->
            <div class="flex-grow md:w-3/4">
                <h1 class="text-4xl font-bold text-yellow-400 mb-8">Weekly Metrics Tracker</h1>

                <button @onclick="NavigateBack" class="absolute top-4 left-4 px-4 py-2 bg-gray-700 text-yellow-400 rounded font-semibold hover:bg-gray-600 transition-colors z-10">
                    &lt; Back to Home
                </button>

                <!-- Department and Period Selection -->
                <div class="mb-6 p-4 bg-gray-800 rounded-lg border border-gray-700">
                    <h2 class="text-xl font-semibold text-yellow-400 mb-3">Selection</h2>
                    <div class="flex space-x-4">
                        <select class="flex-1 px-3 py-2 bg-gray-700 border border-gray-600 rounded focus:outline-none focus:border-yellow-500" @onchange="OnDepartmentChanged">
                            <option value="">Select Department...</option>
                            @foreach (var department in _departments)
                            {
                                <option value="@department">@department</option>
                            }
                        </select>
                        <select class="flex-1 px-3 py-2 bg-gray-700 border border-gray-600 rounded focus:outline-none focus:border-yellow-500" @onchange="OnPeriodChanged">
                            <option value="">Select Period...</option>
                            @foreach (var period in _periods)
                            {
                                <option value="@period">@period</option>
                            }
                        </select>
                    </div>
                    
                    <!-- Excel Upload -->
                    <div class="mt-4">
                         <label for="excel-upload" class="block text-sm font-medium text-gray-300 mb-1">Upload Excel Tracker:</label>
                         <InputFile id="excel-upload" OnChange="@HandleFileSelected" accept=".xlsx, .xls, .csv" class="block w-full text-sm text-gray-400 file:mr-4 file:py-2 file:px-4 file:rounded file:border-0 file:text-sm file:font-semibold file:bg-yellow-500 file:text-gray-900 hover:file:bg-yellow-400 cursor-pointer"/>
                    </div>
                    @if (!string.IsNullOrEmpty(_uploadStatusMessage))
                    {
                        <p class="mt-2 text-sm @(_uploadSuccess ? "text-green-400" : "text-red-400")">@_uploadStatusMessage</p>
                    }
                    
                    <!-- Paste Area -->
                    <div class="mt-4">
                         <label for="paste-area" class="block text-sm font-medium text-gray-300 mb-1">Or Paste Excel Data:</label>
                         <textarea id="paste-area" 
                                   @bind="_pastedData" 
                                   @bind:event="oninput" 
                                   rows="6" 
                                   class="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-yellow-500 focus:border-transparent placeholder-gray-500" 
                                   placeholder="Paste rows/columns from Excel here..."></textarea>
                    </div>
                    <div class="mt-2 text-right">
                         <button @onclick="HandlePastedData" class="px-4 py-1 bg-blue-600 hover:bg-blue-500 text-white rounded font-semibold text-sm transition-colors">
                             Process Pasted Data
                         </button>
                    </div>
                </div>

                <!-- Data Input Grid -->
                <div class="bg-gray-800 rounded-lg border border-gray-700 p-4 overflow-x-auto">
                    <h2 class="text-xl font-semibold text-yellow-400 mb-3">Enter Metrics for @(_selectedDepartment ?? "Selected Department")</h2>
                    @if (_currentDepartmentMembers != null && _currentDepartmentMembers.Any() && !string.IsNullOrEmpty(_selectedDepartment) && _departmentMetrics.ContainsKey(_selectedDepartment))
                    {
                        <table class="w-full min-w-[800px] border-collapse">
                            <!-- Table Head -->
                            <thead>
                                <tr class="bg-gray-700">
                                    <th class="p-3 text-left sticky left-0 bg-gray-700 z-10">Name</th>
                                    @foreach (var metricKey in _departmentMetrics[_selectedDepartment])
                                    {
                                        <th class="p-3 text-center">@GetMetricDisplayName(metricKey)</th>
                                    }
                                </tr>
                            </thead>
                            <!-- Table Body -->
                            <tbody>
                                @foreach (var member in _currentDepartmentMembers.OrderBy(m => m.Name))
                                {
                                    <tr class="border-b border-gray-700 hover:bg-gray-700/50 transition-colors">
                                        <td class="p-3 font-medium sticky left-0 bg-gray-800 hover:bg-gray-700/50 z-10">@member.Name</td>
                                        @foreach (var metricKey in _departmentMetrics[_selectedDepartment])
                                        {
                                            <td>
                                                <input type="text"
                                                       class="w-full px-2 py-1 bg-gray-600 border border-gray-500 rounded focus:outline-none focus:border-yellow-500 focus:bg-gray-500 text-center"
                                                       placeholder="-"
                                                       @bind="_inputValues[member.Id][metricKey]"
                                                       @bind:event="oninput" />
                                            </td>
                                        }
                                    </tr>
                                }
                            </tbody>
                        </table>
                    }
                    else if (!string.IsNullOrEmpty(_selectedDepartment))
                    {
                        <p class="text-gray-500">No team members found for @_selectedDepartment or metrics not defined.</p>
                    }
                    else
                    {
                        <p class="text-gray-500">Select a department to display the input grid.</p>
                    }
                </div>

                <!-- Save Button -->
                <div class="mt-6 text-right">
                    <button @onclick="() => SaveMetrics()" class="px-6 py-2 bg-green-600 hover:bg-green-500 rounded font-semibold transition-colors">
                        @(_isSaving ? "Saving..." : "Save Metrics")
                    </button>
                    <button @onclick="ClearInputs" class="mt-2 text-sm text-gray-400 hover:text-gray-200 underline focus:outline-none">
                        Clear Inputs
                    </button>

                    @if (!string.IsNullOrEmpty(_saveSuccessMessage))
                    {
                        <div class="mt-3 p-2 bg-green-800 border border-green-600 text-green-200 rounded text-sm">
                            @_saveSuccessMessage
                        </div>
                    }

                    @if (!string.IsNullOrEmpty(_saveError))
                    {
                        <p class="text-red-500 text-sm mt-2 text-right">@_saveError</p>
                    }
                </div>
            </div>

            <!-- Right Side Panel (Rankings & Archive Link) -->
            <div class="md:w-1/4 bg-gray-800 rounded-lg border border-gray-700 p-6 self-start sticky top-8">
                <h2 class="text-2xl font-semibold text-yellow-400 mb-4 border-b border-gray-700 pb-2">Rankings & Tools</h2>

                <div class="mb-6">
                    <h3 class="text-lg font-semibold text-yellow-300 mb-3">Department Rankings</h3>
                    @if (_departmentRankings == null || !_departmentRankings.Any())
                    {
                        <p class="text-gray-500 italic">Calculating ranks...</p>
                        @* Could add a spinner here *@
                    }
                    else
                    {
                        <div class="space-y-4">
                            @foreach (var kvp in _departmentRankings.OrderBy(kv => kv.Key)) // Order departments alphabetically
                            {
                                <div>
                                    <h4 class="font-semibold text-gray-300 mb-1">@kvp.Key</h4>
                                    <ul class="space-y-1 text-sm">
                                        @foreach (var rankedMember in kvp.Value.Take(5)) // Show top 5 per department
                                        {
                                            <li class="flex justify-between items-center @(rankedMember.Rank == 1 ? "text-yellow-400" : (rankedMember.Rank <= 3 ? "text-gray-200" : "text-gray-400"))">
                                                <span>@rankedMember.Rank. @rankedMember.Name</span>
                                                <span class="font-mono text-xs">@rankedMember.Score.ToString("F0")</span>
                                            </li>
                                        }
                                        @if (kvp.Value.Count > 5)
                                        {
                                            <li class="text-gray-500 text-xs italic">... and @(kvp.Value.Count - 5) more</li>
                                        }
                                    </ul>
                                </div>
                            }
                        </div>
                    }
                </div>

                <div>
                    <h3 class="text-lg font-semibold text-yellow-300 mb-3">Archive</h3>
                     <button @onclick="NavigateToArchive" class="w-full text-center px-4 py-2 bg-blue-600 hover:bg-blue-500 rounded font-semibold transition-colors">
                        View Archived Trackers
                     </button>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private bool _isAuthenticated = false;
    private bool _showPasswordModal = false;
    private string _enteredPassword = string.Empty;
    private string _passwordInput = string.Empty;
    private string _passwordError = string.Empty;
    private const string CorrectPassword = "Admin321";
    private bool _isSaving = false; // For loading state on save button
    private string? _saveError = null;
    private string? _uploadStatusMessage = null;
    private bool _uploadSuccess = false;
    private string _pastedData = string.Empty;
    private string? _saveSuccessMessage = null; // Add field for success message

    private List<string> _departments = new List<string>();
    private List<string> _periods = new List<string>();
    private string? _selectedDepartment;
    private string? _selectedPeriod;
    private List<TeamMember>? _currentDepartmentMembers;
    private Dictionary<int, Dictionary<string, string>> _inputValues = new Dictionary<int, Dictionary<string, string>>();
    private List<TeamMember>? _allMembersForRanking; // Store all members for ranking
    private Dictionary<string, List<RankedMember>>? _departmentRankings; // Store calculated rankings

    // Define known metrics per department (adjust as needed)
    private readonly Dictionary<string, List<string>> _departmentMetrics = new Dictionary<string, List<string>>(StringComparer.OrdinalIgnoreCase)
    {
        { "Computers", new List<string> { "M365Attach", "GSP", "Revenue", "ASP", "Basket", "PMAttach" } },
        { "Store", new List<string> { "Revenue", "5Star", "GSP", "Basket" } },
        { "Front", new List<string> { "GSP", "BP", "PM", "5Star" } },
        { "Warehouse", new List<string> { "Picks", "Accuracy", "Awk", "Units" } }
        // TODO: Consider loading metric definitions from a configuration or backend source
    };
    
    // Mapping from Internal Key -> Expected CSV Header Name
    // TODO: Expand this mapping for Store, Front, and Warehouse departments when their CSV formats are known
    private readonly Dictionary<string, string> _internalKeyToCsvHeaderMap = new(StringComparer.OrdinalIgnoreCase)
    {
        { "M365Attach", "M365 Attach" },
        { "GSP", "Total Warranty Attach" }, 
        { "Revenue", "Category Direct $" }, 
        { "ASP", "ASP" },
        { "Basket", "Basket RPT" },        
        { "PMAttach", "PM Attach" } 
    };

    // Property for binding, clears error on input
    private string PasswordInputValue
    {
        get => _passwordInput;
        set
        {
            _passwordInput = value;
            if (!string.IsNullOrEmpty(_passwordError))
            {
                _passwordError = string.Empty;
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        _allMembersForRanking = await DataService.GetTeamMembersAsync();
        _departments = _allMembersForRanking.Select(m => m.Department).Distinct(StringComparer.OrdinalIgnoreCase).OrderBy(d => d).ToList(); 
        _periods = GenerateBiweeklyPeriods(6);
        CalculateAllRankings(); // Calculate initial rankings
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !_isAuthenticated)
        {
            await Task.Delay(50); // Shorter delay maybe
            _showPasswordModal = true;
            await InvokeAsync(StateHasChanged);
        }
    }

    private List<string> GenerateBiweeklyPeriods(int monthsToGoBack)
    {
        var periods = new List<string>();
        var today = DateTime.Today;
        var cutoffDate = today.AddDays(-14); // Only show periods ending within the last 14 days or in the future

        for (int i = monthsToGoBack; i >= -1; i--) // Include current/next month slightly
        {
            var monthStart = new DateTime(today.Year, today.Month, 1).AddMonths(-i);
            var midMonthDate = monthStart.AddDays(14); // Approx mid-month
            var endOfMonthDate = monthStart.AddMonths(1).AddDays(-1);

            // Format: Mid-MMM yyyy (ends around 15th)
            string midPeriod = $"Mid-{monthStart:MMM yyyy}";
            if (midMonthDate >= cutoffDate)
            {
                periods.Add(midPeriod);
            }

            // Format: EOM-MMM yyyy (ends at end of month)
            string eomPeriod = $"EOM-{monthStart:MMM yyyy}";
            if (endOfMonthDate >= cutoffDate)
            { 
                periods.Add(eomPeriod);
            }
        }
        // Return in descending order (newest first)
        return periods.OrderByDescending(p => GetPeriodEndDate(p)).ToList(); 
    }

    // Helper to get an approximate end date for sorting/filtering
    private DateTime GetPeriodEndDate(string period)
    {
        try
        {
            string[] parts = period.Split('-');
            string monthYear = parts[1]; 
            DateTime monthStartDate = DateTime.ParseExact("01-" + monthYear, "dd-MMM yyyy", System.Globalization.CultureInfo.InvariantCulture);
            
            if (parts[0].Equals("Mid", StringComparison.OrdinalIgnoreCase))
            {
                return monthStartDate.AddDays(14); // Approx mid-month end
            }
            else // EOM
            {
                return monthStartDate.AddMonths(1).AddDays(-1); // End of month
            }
        }
        catch 
        { 
            return DateTime.MinValue; // Fallback for parsing errors
        }
    }

    private void OnDepartmentChanged(ChangeEventArgs e)
    {
        _selectedDepartment = e.Value?.ToString();
        LoadMembersAndInitializeInputs();
    }
    
    private void OnPeriodChanged(ChangeEventArgs e)
    {
        _selectedPeriod = e.Value?.ToString();
        LoadMembersAndInitializeInputs();
    }

    private void LoadMembersAndInitializeInputs()
    {
        _currentDepartmentMembers = null;
        _inputValues.Clear();
        _saveError = null; // Clear any previous save errors
        
        if (!string.IsNullOrEmpty(_selectedDepartment))
        {
            // Use the already loaded list for ranking, just filter for current view
            _currentDepartmentMembers = _allMembersForRanking?.Where(m => m.Department.Equals(_selectedDepartment, StringComparison.OrdinalIgnoreCase)).ToList();
            
            // TODO: When persistence is added, load saved metric data for the selected department AND period here.
            // Example: var savedData = await ApiClient.GetMetricsForPeriod(_selectedDepartment, _selectedPeriod);
            // This would replace or supplement the initialization below.

            InitializeInputValues(); // Initialize based on current members
        }
        StateHasChanged(); // Update UI
    }

    // Initialize the input dictionary
    private void InitializeInputValues()
    {
        _inputValues.Clear();
        if (_currentDepartmentMembers == null || string.IsNullOrEmpty(_selectedDepartment))
        {
            return;
        }

        if (!_departmentMetrics.TryGetValue(_selectedDepartment, out var metricsForDept))
        {
            metricsForDept = new List<string>(); // Handle case where department metrics aren't defined
        }

        foreach (var member in _currentDepartmentMembers)
        {
            var memberInputs = new Dictionary<string, string>();
            foreach (var metricKey in metricsForDept)
            {
                // TODO: If saved data for the period was loaded, use that value here instead of empty string.
                // Example: memberInputs[metricKey] = savedData.GetValueOrDefault(member.Id)?.GetValueOrDefault(metricKey) ?? string.Empty;
                memberInputs[metricKey] = string.Empty; // Default to empty for new input
            }
            _inputValues[member.Id] = memberInputs;
        }
    }

    // Password Check Logic
    private void CheckPassword()
    {
        _enteredPassword = _passwordInput; // Update the actual variable *before* checking

        if (_enteredPassword == CorrectPassword)
        {
            _passwordError = string.Empty;
            _isAuthenticated = true;
            _showPasswordModal = false;
        }
        else
        {
            _passwordError = "Incorrect password.";
            _passwordInput = string.Empty; // Clear the input field visually on error
        }
        // Always trigger a UI update after checking
        InvokeAsync(StateHasChanged);
    }

    // Handle Enter key specifically
    private void HandlePasswordInputKeydown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            CheckPassword(); 
        }
    }

    private void NavigateBack()
    {
        NavigationManager.NavigateTo("/");
    }

    private void NavigateToArchive()
    {
        NavigationManager.NavigateTo("/archived-trackers");
    }

    private async Task SaveMetrics()
    {
        Console.WriteLine("!!! SaveMetrics METHOD ENTERED. _isSaving = " + _isSaving + " !!!");
        if (_isSaving) return;
        _isSaving = true;
        _saveError = null;
        _saveSuccessMessage = null;

        if (_currentDepartmentMembers == null || string.IsNullOrEmpty(_selectedDepartment) || string.IsNullOrEmpty(_selectedPeriod))
        {
            _saveError = "Department and Period must be selected.";
            _isSaving = false;
            StateHasChanged();
            return;
        }
        
        List<Task> updateTasks = new List<Task>();
        Dictionary<string, double> currentPeriodTeamAverages = CalculateCurrentPeriodTeamAverages();
        bool anyInputErrors = false; // Track if any parsing errors occurred across all members

        Console.WriteLine($"--- Starting SaveMetrics for {_selectedDepartment} - {_selectedPeriod} ---");
        try 
        {
            // Iterate through the members currently displayed in the grid
            foreach (var member in _currentDepartmentMembers) // Correct: Iterate over _currentDepartmentMembers
            {
                // Get the input values entered for this member from the dictionary
                if (_inputValues.TryGetValue(member.Id, out var memberInputs))
                {
                    var newRecordsForPeriod = new List<MetricRecord>();
                    double currentPeriodPerformanceScoreTotal = 0;
                    int currentPeriodMetricCount = 0;
                    bool memberHadInputError = false;

                    Console.WriteLine($"Processing inputs for member: {member.Name} (ID: {member.Id})");

                    // Iterate through the metrics expected for this department
                    if (_departmentMetrics.TryGetValue(_selectedDepartment, out var metricsForDept))
                    {
                        foreach (var metricKey in metricsForDept)
                        {
                            // Get the specific value entered for this metric from the member's input dictionary
                            string stringValue = memberInputs.GetValueOrDefault(metricKey, string.Empty)?.Trim() ?? string.Empty;

                            Console.WriteLine($"  Metric: {metricKey}, Input Value: '{stringValue}'");

                            // Attempt to parse for XP calculation and validation
                            double? numericValue = GetDoubleValueFromString(stringValue, metricKey);

                            if (!string.IsNullOrEmpty(stringValue) && !numericValue.HasValue)
                            {
                                Console.WriteLine($"    WARNING: Could not parse non-empty input '{stringValue}' for metric '{metricKey}'. Skipping record & score.");
                                anyInputErrors = true;
                                memberHadInputError = true;
                                continue; // Skip this specific metric for this member
                            }

                            // Create MetricRecord with the raw string value
                            newRecordsForPeriod.Add(new MetricRecord
                            {
                                TeamMemberId = member.Id,
                                Period = _selectedPeriod,
                                MetricKey = metricKey,
                                Value = stringValue
                            });

                            // Calculate performance score using the parsed numeric value
                            if (numericValue.HasValue)
                        {
                            currentPeriodPerformanceScoreTotal += CalculatePerformanceScore(metricKey, numericValue.Value, currentPeriodTeamAverages);
                            currentPeriodMetricCount++;
                                Console.WriteLine($"    Parsed as {numericValue.Value}. Score added.");
                            }
                        } // End loop through expected metrics
                    }
                    else
                    {
                        Console.WriteLine($"  WARNING: No metrics defined for department '{_selectedDepartment}'. Cannot process inputs for {member.Name}.");
                        memberHadInputError = true; // Treat as error if department definition is missing
                    }

                    // Only proceed if no parsing errors occurred for this member
                    if (!memberHadInputError)
                    {
                        // 1. Save Metric Records
                        updateTasks.Add(DataService.SaveMetricRecordsForPeriodAsync(member.Id, _selectedPeriod, newRecordsForPeriod));
                        Console.WriteLine($"  Queueing {newRecordsForPeriod.Count} metric records save for period '{_selectedPeriod}'.");

                        // 2. Calculate and Update Experience
                        if (currentPeriodMetricCount > 0)
                        {
                            double averagePeriodScore = currentPeriodPerformanceScoreTotal / currentPeriodMetricCount;
                            member.TotalExperience += averagePeriodScore; 
                            Console.WriteLine($"  Calculated {averagePeriodScore:F2} XP. New Total XP: {member.TotalExperience:F2}");
                            // 3. Update TeamMember (for XP)
                            updateTasks.Add(DataService.UpdateTeamMemberAsync(member));
                            Console.WriteLine($"  Queueing XP update.");
                        }
                        else
                        {
                            Console.WriteLine($"  No numeric metrics found/parsed. No XP awarded.");
                        }
                    }
                    else
                    {
                        Console.WriteLine($"  Skipping save & XP update for {member.Name} due to input errors.");
                    }
                } // End if member found in _inputValues
                else
                {
                    Console.WriteLine($"WARNING: No input values found in dictionary for member {member.Name} (ID: {member.Id}). Skipping save.");
                }
            } // End loop through members
            
            // Wait for all database updates to complete
            await Task.WhenAll(updateTasks);
            Console.WriteLine("--- Update tasks completed ---");
            
            // --- Update _allMembersForRanking with latest XP --- 
            if (_allMembersForRanking != null && _currentDepartmentMembers != null)
            {
                foreach(var updatedMember in _currentDepartmentMembers)
                {
                    var memberInGlobalList = _allMembersForRanking.FirstOrDefault(m => m.Id == updatedMember.Id);
                    if (memberInGlobalList != null)
                    {
                        memberInGlobalList.TotalExperience = updatedMember.TotalExperience;
                    }
                }
                Console.WriteLine("Synchronized TotalExperience in _allMembersForRanking.");
            }
            // --- End Update --- 
            
            // Recalculate rankings based on potentially updated XP in the current list
            Console.WriteLine("Recalculating rankings...");
            CalculateAllRankings(); // Correct method call
            
            // Notify that metrics were updated
            await AppState.NotifyMetricsUpdatedAsync();

            // Display appropriate message based on parsing errors
             if (anyInputErrors)
             {
                 _saveError = "Metrics saved, but some values could not be parsed. Check console logs.";
                 _saveSuccessMessage = null;
            }
            else
            {
                 _saveSuccessMessage = "Metrics saved successfully!";
                 _saveError = null; 
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in SaveMetrics: {ex}");
            _saveError = $"An error occurred while saving: {ex.Message}";
            _saveSuccessMessage = null;
        }
        finally
        { 
            _isSaving = false; // Ensure saving flag is reset
            StateHasChanged(); // Update UI with messages/button state
            Console.WriteLine("--- SaveMetrics Finished ---");
        }
    }
    
    // --- Helper Methods for Scoring --- 

    // Calculates team averages for the *current input values* before saving
    // Needed to score the current period accurately relative to peers in that period
    private Dictionary<string, double> CalculateCurrentPeriodTeamAverages()
    {
        var averages = new Dictionary<string, double>();
        if (_currentDepartmentMembers == null || string.IsNullOrEmpty(_selectedDepartment) || !_departmentMetrics.ContainsKey(_selectedDepartment))
        {
            return averages;
        }

        var metricsForDept = _departmentMetrics[_selectedDepartment];
        
        foreach (var metricKey in metricsForDept)
        {
            var values = new List<double>();
            foreach (var member in _currentDepartmentMembers)
            {
                if (_inputValues.TryGetValue(member.Id, out var memberInputs) && memberInputs.TryGetValue(metricKey, out var stringValue))
                {
                     double? numericValue = GetDoubleValueFromString(stringValue, metricKey);
                     if (numericValue.HasValue)
                     {
                         values.Add(numericValue.Value);
                     }
                }
            }

            if (values.Any())
            {
                averages[metricKey] = values.Average();
            }
        }
        return averages;
    }

    // Calculates a 0-100 score for a single metric value relative to the team average for that period
    // Updated to include specific goals and bonus multiplier
    private double CalculatePerformanceScore(string metricKey, double numericValue, Dictionary<string, double> teamAverages)
    {
        // Define specific goals for certain metrics
        double? goal = metricKey switch
        {
            "PMAttach" => 25.0,   // Goal is 25%
            "M365Attach" => 30.0, // Goal is 30%
            "GSP" => 20.0,        // Goal is 20%
            _ => null             // No specific goal for other metrics
        };

        double baseScoreTarget = 100.0; // The value needed to achieve a base score of 100 (before bonus)
        bool lowerIsBetter = metricKey.Equals("Awk", StringComparison.OrdinalIgnoreCase);

        if (goal.HasValue && !lowerIsBetter) // Use goal if defined and higher is better
        {
            baseScoreTarget = goal.Value;
        }
        else if (teamAverages.TryGetValue(metricKey, out double average) && average > 0) // Otherwise, use team average if available
        {
             baseScoreTarget = average; 
        }
        else if (!lowerIsBetter) // If no goal and no average, and higher is better, default target (prevents division by zero)
        {
             // If value is positive, they get score relative to itself (100), otherwise 0 or 50?
             // Let's default to giving 50 if target is 0 and value is 0, 100 if value > 0
             return numericValue > 0 ? 100 : 50;
        }
        // If lowerIsBetter and no average, how to score? Let's adapt the logic below.

        double score;
        double bonusMultiplier = 1.25;

        if (lowerIsBetter)
        {
            // Special handling for lower is better (like Awk)
            if (baseScoreTarget <= 0) // If average is 0 or less, any time is bad? Or perfect if 0?
            {
                 return numericValue <= 0 ? 100 : 0; // 100 if 0, 0 otherwise
            }
             if (numericValue <= 0) return 100; // Perfect score if 0
            
            // Score relative to average/target. Higher ratio (avg/value) is better.
            double ratio = baseScoreTarget / numericValue;
            score = ratio * 50; // Base score scaled to 50 at target
            
            // No bonus concept typically applied when lower is better, 
            // but you could define one if needed. Score is capped later.
        }
        else // Higher is better
        {
            if (baseScoreTarget <= 0) // Should have been handled above, but as safety
            {
                 return numericValue > 0 ? 100 : 50;
            }
            
            // Calculate base score relative to the target (goal or average)
            double baseRatio = numericValue / baseScoreTarget;
            score = baseRatio * 100; // Achieving the target gives a score of 100

            // Apply bonus multiplier for exceeding the target
            if (numericValue > baseScoreTarget)
            {
                double excessValue = numericValue - baseScoreTarget;
                double excessRatio = excessValue / baseScoreTarget; // How much over target, relative to target
                // Calculate bonus points: excessRatio * 100 gives base points for the excess,
                // then apply the multiplier. Add this to the base 100 score.
                double bonusPoints = (excessRatio * 100) * bonusMultiplier;
                score = 100 + bonusPoints; 
            }
        }

        // Cap score between 0 and a reasonable maximum (e.g., 200, or adjust based on multiplier)
        // Let's cap around 150 to prevent extreme scores from bonus
        return Math.Min(Math.Max(score, 0), 150); 
    }

    // Helper to parse input string to double? based on metric type context
    private double? GetDoubleValueFromString(string? stringValue, string metricKey)
    {
        if (string.IsNullOrWhiteSpace(stringValue)) return null;

        // --- Add logic to handle percentage signs ---
        stringValue = stringValue.Trim(); // Ensure no leading/trailing whitespace
        bool isPercentage = stringValue.EndsWith('%');
        if (isPercentage)
        {
            // Remove the '%' sign before parsing
            stringValue = stringValue.TrimEnd('%').Trim(); 
        }
        // --- End percentage handling ---

        // Now attempt parsing the cleaned string as double
        // Use InvariantCulture to handle decimal points consistently
        if (double.TryParse(stringValue, System.Globalization.NumberStyles.Any, System.Globalization.CultureInfo.InvariantCulture, out double parsedValue))
        {
            // Assuming scoring uses the number directly (e.g., 21.1 for 21.1%):
            return parsedValue; 
        }
        
        // Try parsing as int for specifically integer-based metrics if double failed (e.g., if input was just "120")
        // Note: double.TryParse above should handle integers too, but this is an extra check.
        if (metricKey == "BP" || metricKey == "PM" || metricKey == "Picks" || metricKey == "Units")
        {
            if (int.TryParse(stringValue, System.Globalization.NumberStyles.Any, System.Globalization.CultureInfo.InvariantCulture, out int intVal)) 
            {
                return (double)intVal;
            }
        }

        return null; // Parsing failed
    }
    
    // Helper to convert various object types to double? (used for scoring helper)
     private double? GetDoubleValue(object? value)
    {
        if (value == null) return null;
        if (value is double d) return d;
        if (value is int i) return (double)i;
        if (value is long l) return (double)l;
        if (value is decimal dec) return (double)dec;
        return null; 
    }

    // --- End Helper Methods --- 

    // Helper to get metric display name
    private string GetMetricDisplayName(string key)
    {
        return TeamMember.GetMetricDisplayName(key); 
    }

    // --- Ranking Calculation --- 
    private void CalculateAllRankings()
    {
        if (_allMembersForRanking == null || !_allMembersForRanking.Any()) return;
        Console.WriteLine($"Calculating rankings based on TotalExperience for {_allMembersForRanking.Count} members."); 

        _departmentRankings = new Dictionary<string, List<RankedMember>>();

        foreach (var department in _departments)
        {
            var membersInDept = _allMembersForRanking
                                .Where(m => m.Department.Equals(department, StringComparison.OrdinalIgnoreCase))
                                .ToList();
            if (!membersInDept.Any()) continue;

            Console.WriteLine($"  Processing department: {department} ({membersInDept.Count} members)");
            
            var rankedList = membersInDept
                .Select(member => new RankedMember
                {
                    Id = member.Id,
                    Name = member.Name ?? "Unknown", 
                    Department = member.Department,
                    Score = member.TotalExperience // Rank directly based on TotalExperience
                })
                .OrderByDescending(rm => rm.Score)
                .Select((rm, index) => { rm.Rank = index + 1; return rm; })
                .ToList();

            Console.WriteLine($"    Ranked list for {department}:");
            foreach(var rankedMember in rankedList.Take(5)) // Log top 5
            {
                 Console.WriteLine($"      Rank {rankedMember.Rank}: {rankedMember.Name} (Score/XP: {rankedMember.Score:F2})");
            }

            _departmentRankings[department] = rankedList;
        }
         Console.WriteLine("Ranking calculation complete. Triggering UI update.");
        InvokeAsync(StateHasChanged); // Update the UI with rankings
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        _uploadStatusMessage = "Processing file...";
        _uploadSuccess = false;
        StateHasChanged();

        if (string.IsNullOrEmpty(_selectedDepartment) || string.IsNullOrEmpty(_selectedPeriod))
        {
            _uploadStatusMessage = "Please select a department and period first.";
            return;
        }

        var file = e.File;
        if (file == null)
        {
            _uploadStatusMessage = "No file selected.";
            return;
        }
        
        // Basic validation (optional: add size check)
        if (!file.Name.EndsWith(".xlsx", StringComparison.OrdinalIgnoreCase) && !file.Name.EndsWith(".xls", StringComparison.OrdinalIgnoreCase) && 
            !file.Name.EndsWith(".csv", StringComparison.OrdinalIgnoreCase))
        {
            _uploadStatusMessage = "Invalid file type. Please upload an Excel (.xlsx, .xls) or CSV file.";
            return;
        }

        try
        {
            // Let the user know we're processing
            _uploadStatusMessage = "Reading file... This might take a moment for larger files.";
            StateHasChanged();
            
            // Read the file as a base64 string
            byte[] fileData;
            using (var ms = new MemoryStream())
            {
                await file.OpenReadStream().CopyToAsync(ms);
                fileData = ms.ToArray();
            }
            
            // For CSV files, we can process directly
            if (file.Name.EndsWith(".csv", StringComparison.OrdinalIgnoreCase))
            {
                var content = System.Text.Encoding.UTF8.GetString(fileData);
                _pastedData = content;
                HandlePastedData();
                return;
            }
            
            // For Excel files, ask the user to try CSV format instead
            _uploadStatusMessage = "For Excel files, please save as CSV format first or use the paste area below. " +
                                  "In Excel: File > Save As > CSV (Comma delimited)";
            _uploadSuccess = false;
        }
        catch (Exception ex)
        {
            _uploadStatusMessage = $"Error processing file: {ex.Message}";
            _uploadSuccess = false;
        }
        finally
        {
            StateHasChanged();
        }
    }

    private void HandlePastedData()
    {
        _uploadStatusMessage = "Processing pasted data...";
        _uploadSuccess = false;
        StateHasChanged();

        if (string.IsNullOrEmpty(_selectedDepartment) || string.IsNullOrEmpty(_selectedPeriod))
        {
            _uploadStatusMessage = "Please select a department and period first.";
            return;
        }

        if (string.IsNullOrWhiteSpace(_pastedData))
        {
            _uploadStatusMessage = "Paste area is empty.";
            return;
        }

        try
        {
            var lines = _pastedData.Split(new[] { '\r', '\n' }, StringSplitOptions.RemoveEmptyEntries);
            if (lines.Length <= 1)
            {
                _uploadStatusMessage = "Pasted data needs at least a header row and one data row.";
                return;
            }

            // --- Process Header Row --- 
            // Detect delimiter: Check for comma first (CSV), then tab (Pasted Excel)
            char delimiter = ','; // Default to comma for CSV
            var headerCells = lines[0].Split(delimiter);
            if (headerCells.Length <= 1) // If comma didn't split much, try tab
            {
                delimiter = '\t';
                headerCells = lines[0].Split(delimiter);
                if (headerCells.Length <= 1) // If neither worked, something is wrong
                {
                     _uploadStatusMessage = "Could not detect columns (comma or tab separated). Invalid format?";
                     return;
                }
            }
            
            var headers = new Dictionary<int, string>();
            int nameColumn = -1;
            for (int i = 0; i < headerCells.Length; i++)
            {
                var headerText = headerCells[i]?.Trim();
                if (!string.IsNullOrEmpty(headerText))
                {
                    headers.Add(i, headerText);
                    if (headerText.Equals("Employee", StringComparison.OrdinalIgnoreCase))
                    {
                        nameColumn = i;
                    }
                }
            }

            if (nameColumn == -1)
            {
                _uploadStatusMessage = "Could not find an 'Employee' column in the pasted data/CSV.";
                return;
            }
            
            // --- Find Metric Columns ---
            var departmentMetrics = _departmentMetrics[_selectedDepartment];
            // This dictionary maps the INTERNAL metric key to the 0-BASED column index in the CSV/pasted data
            var metricColumns = new Dictionary<string, int>();

            // We already have the 'headers' dictionary: Dictionary<int ColumnIndex0Based, string HeaderText>

            Console.WriteLine("--- Starting Metric Column Mapping ---");
            Console.WriteLine($"Headers found (Index -> Text): {System.Text.Json.JsonSerializer.Serialize(headers)}"); // Log the headers we found

            foreach (var internalMetricKey in departmentMetrics)
            {
                Console.WriteLine($"Processing internal metric: '{internalMetricKey}'");
                // Find the expected CSV header name for this internal key using the map
                if (_internalKeyToCsvHeaderMap.TryGetValue(internalMetricKey, out var expectedCsvHeader))
                {
                    Console.WriteLine($"  Mapped to expected CSV header: '{expectedCsvHeader}'");
                    // Now, search the actual headers found in the file to get the 0-based index
                    bool foundMatch = false;
                    foreach (var headerPair in headers) // headerPair is KeyValuePair<int Index0Based, string HeaderText>
                    {
                        if (headerPair.Value.Equals(expectedCsvHeader, StringComparison.OrdinalIgnoreCase))
                        {
                            int colIndex = headerPair.Key; // This is the 0-based index
                            // Ensure we don't accidentally map the 'Employee' column index if names collide
                            if (colIndex != nameColumn)
                            {
                                metricColumns.Add(internalMetricKey, colIndex);
                                Console.WriteLine($"    MATCH FOUND: Storing '{internalMetricKey}' -> Index {colIndex}");
                                foundMatch = true;
                                break; // Found the header for this metric, move to the next metric
                            }
                            else
                            {
                                Console.WriteLine($"    Skipping potential match at index {colIndex} because it's the Employee column.");
                            }
                        }
                    }

                    if (!foundMatch)
                    {
                        // Expected CSV header from map was not found in the actual CSV file headers
                        Console.WriteLine($"    NO MATCH: Expected CSV header '{expectedCsvHeader}' for metric '{internalMetricKey}' not found in uploaded data headers.");
                    }
                }
                else
                {
                    // This internal metric key doesn't have a mapping defined in _internalKeyToCsvHeaderMap
                    Console.WriteLine($"  NO MAPPING: No CSV header mapping defined for internal metric key '{internalMetricKey}'.");
                }
            }
            Console.WriteLine($"--- Finished Metric Column Mapping ---");
            Console.WriteLine($"Resulting metricColumns (InternalKey -> Index): {System.Text.Json.JsonSerializer.Serialize(metricColumns)}"); // Log the final map


            if (!metricColumns.Any())
            {
                // Updated message slightly
                _uploadStatusMessage = $"Found 'Employee' column, but could not map any required metric columns ({string.Join(", ", departmentMetrics)}) based on expected CSV headers.";
                Console.WriteLine(_uploadStatusMessage); // Log why we failed
                return;
            }

            // --- Process Data Rows ---
            int updatedCount = 0;
            var membersInDept = _currentDepartmentMembers ?? new List<TeamMember>();
            var assignedMemberIds = new HashSet<int>(); // Keep track of app members already assigned data in this run

            Console.WriteLine($"--- Starting Row Processing ({lines.Length - 1} data rows) ---");

            for (int i = 1; i < lines.Length; i++) // Start from line 1 (skip header)
            {
                var cells = lines[i].Split(delimiter);
                if (cells.Length <= nameColumn) { Console.WriteLine($"Skipping row {i + 1}: Not enough columns based on delimiter '{delimiter}'."); continue; }

                var fullCsvName = cells[nameColumn]?.Trim();
                if (string.IsNullOrEmpty(fullCsvName)) { Console.WriteLine($"Skipping row {i + 1}: Employee name is empty."); continue; }

                // --- Refined Name Matching V4 ---
                TeamMember? matchedMember = null;
                var csvNameParts = fullCsvName.Split(new[] { ' ' }, 2);
                var csvFirstName = csvNameParts[0];
                var csvLastName = csvNameParts.Length > 1 ? csvNameParts[1] : "";

                // --- Special Case/Alias Mapping ---
                if (fullCsvName.Equals("Vinicius Domingues", StringComparison.OrdinalIgnoreCase))
                {
                    matchedMember = membersInDept.FirstOrDefault(m => m.Name != null && m.Name.Equals("Vinny", StringComparison.OrdinalIgnoreCase));
                    if (matchedMember != null)
                    {
                        Console.WriteLine($"Match FOUND via special case for CSV '{fullCsvName}' -> App '{matchedMember.Name}'");
                    }
                }
                // Add other aliases here if needed
                // --- End Special Case ---

                // 1. Try for an exact full name match (if not already matched by special case)
                if (matchedMember == null)
                {
                    matchedMember = membersInDept.FirstOrDefault(m =>
                        m.Name != null &&
                        m.Name.Equals(fullCsvName, StringComparison.OrdinalIgnoreCase));
                    if (matchedMember != null)
                    {
                        Console.WriteLine($"Match FOUND via exact name for CSV '{fullCsvName}' -> App '{matchedMember.Name}'");
                    }
                }

                // 2. If still no match, try the first name + last name contains logic (Fallback)
                if (matchedMember == null)
                {
                    var potentialMatches = new List<TeamMember>();
                    foreach (var potentialMember in membersInDept)
                    {
                        if (potentialMember.Name == null) continue;
                        var appNameParts = potentialMember.Name.Split(new[] { ' ' }, 2);
                        var appFirstName = appNameParts[0];
                        var appLastName = appNameParts.Length > 1 ? appNameParts[1] : "";

                        if (appFirstName.Equals(csvFirstName, StringComparison.OrdinalIgnoreCase))
                        {
                            if (string.IsNullOrEmpty(appLastName) || (!string.IsNullOrEmpty(csvLastName) && csvLastName.Contains(appLastName, StringComparison.OrdinalIgnoreCase)))
                            {
                                potentialMatches.Add(potentialMember);
                            }
                        }
                    }

                    if (potentialMatches.Count == 1)
                    {
                        matchedMember = potentialMatches[0];
                        Console.WriteLine($"Match FOUND via fallback logic for CSV '{fullCsvName}' -> App '{matchedMember.Name}'");
                    }
                    else if (potentialMatches.Count > 1)
                    {
                        Console.WriteLine($"Ambiguous Match Warning (Fallback): CSV name '{fullCsvName}' potentially matched multiple members: [{string.Join(", ", potentialMatches.Select(p => p.Name))}]. Skipping row {i + 1}.");
                        // matchedMember remains null
                    }
                }

                // --- Final Check and Overwrite Prevention ---
                if (matchedMember == null)
                {
                    Console.WriteLine($"No unique match found for CSV name: '{fullCsvName}'. Skipping row {i + 1}.");
                    continue;
                }

                // Check if this app member already got data assigned in this run
                if (assignedMemberIds.Contains(matchedMember.Id))
                {
                    Console.WriteLine($"Conflict: App member '{matchedMember.Name}' (ID: {matchedMember.Id}) has already been assigned data in this run. Skipping CSV row for '{fullCsvName}'.");
                    continue; // Skip this CSV row to prevent overwrite
                }
                // --- End Final Check ---

                // --- Process Metrics for Matched Member ---
                Console.WriteLine($"Processing metrics for matched member: '{matchedMember.Name}' (ID: {matchedMember.Id}) from CSV row {i + 1}");
                assignedMemberIds.Add(matchedMember.Id); // Mark this member as assigned FOR THIS RUN

                if (!_inputValues.ContainsKey(matchedMember.Id))
                {
                    _inputValues[matchedMember.Id] = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);
                }
                
                foreach (var kvp in metricColumns) // metricColumns maps InternalKey -> CSV_Index
                {
                    var internalMetricKey = kvp.Key;
                    var colIndex = kvp.Value;       // 0-based index in CSV data

                    if (colIndex >= 0 && colIndex < cells.Length) // Ensure colIndex is valid and cell exists
                    {
                        var cellValue = cells[colIndex]?.Trim();
                        _inputValues[matchedMember.Id][internalMetricKey] = cellValue ?? string.Empty;
                        // Console.WriteLine($"  Updating {internalMetricKey} with value '{cellValue}' from column index {colIndex}"); // Optional: Deeper logging
                    }
                    else
                    {
                        Console.WriteLine($"  WARNING: Invalid column index {colIndex} calculated for metric {internalMetricKey}. Cannot get value for row {i + 1}.");
                    }
                }
                updatedCount++;
            } // End row loop
            Console.WriteLine($"--- Finished Row Processing ---");

            if (updatedCount > 0)
            {
                _uploadStatusMessage = $"Successfully processed pasted data. Updated metrics for {updatedCount} member(s).";
                _uploadSuccess = true;
                 _pastedData = string.Empty; // Clear paste area on success
            }
            else
            {
                _uploadStatusMessage = "Processed pasted data, but found no matching member names.";
                _uploadSuccess = false;
            }
        }
        catch (Exception ex)
        {
            _uploadStatusMessage = $"Error processing pasted data: {ex.Message}";
            _uploadSuccess = false;
             // Log the full exception for debugging
            Console.WriteLine($"Error in HandlePastedData: {ex}");
        }
        finally
        {
             // --- Use InvokeAsync ---
            InvokeAsync(StateHasChanged);
             // ----------------------
        }
    }

    private void ClearInputs()
    {
        _inputValues.Clear();
        _saveError = null;
        _saveSuccessMessage = null;
        StateHasChanged();
    }
}