@using GameScoreboard.Models

<div class="bg-gray-800 border-2 border-yellow-500 rounded-lg overflow-hidden shadow-lg mb-8">
    <div class="p-5">
        <h2 class="text-xl font-bold text-yellow-400 mb-4">Department Performance Overview</h2>

        <div class="flex flex-col md:flex-row">
            <!-- Removed Overall Score Section -->

            <!-- Key Metrics -->
            <div class="w-full"> <!-- Take full width now -->
                <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
                    @foreach (var metric in Summary.AverageMetrics.OrderBy(kv => kv.Key)) // Order for consistency
                    {
                            <div class="bg-gray-700 rounded-md p-3">
                                <!-- Use TeamMember static method for display name -->
                                <div class="text-sm text-gray-400 mb-1">@TeamMember.GetMetricDisplayName(metric.Key)</div>
                                <div class="flex justify-between">
                                    <div>
                                        <!-- Use Callback for formatting -->
                                        <div class="font-bold text-xl">@FormatValueCallback(metric.Key, metric.Value)</div>
                                        <div class="text-xs text-gray-400">Avg</div>
                                    </div>
                                    <div>
                                         <!-- Use Callback for formatting -->
                                        <div class="text-yellow-400 font-bold">@FormatValueCallback(metric.Key, Summary.MaxMetrics.GetValueOrDefault(metric.Key))</div>
                                        <div class="text-xs text-gray-400">High</div>
                                    </div>
                                </div>
                                
                                @* Swapped Order and updated Best color *@
                                <div class="flex justify-between mt-2 text-xs">
                                    <div class="text-red-400">Lowest: @(Summary.BottomPerformers.ContainsKey(metric.Key) ? Summary.BottomPerformers[metric.Key] : "N/A")</div>
                                    <div class="text-yellow-400">Best: @(Summary.TopPerformers.ContainsKey(metric.Key) ? Summary.TopPerformers[metric.Key] : "N/A")</div>
                                </div>

                                <!-- Progress bar showing distance to goal -->
                                <div class="mt-2 relative">
                                    <div class="h-2 bg-gray-800 rounded-full overflow-hidden">
                                        @{
                                            var maxValue = Summary.MaxMetrics.ContainsKey(metric.Key) ? (double)Summary.MaxMetrics[metric.Key] : 0;
                                            var avgValue = (double)metric.Value;
                                            var percentage = maxValue > 0 ? (avgValue / maxValue) * 100 : 0;
                                            percentage = Math.Min(percentage, 100); // Cap at 100%
                                        }
                                        <div class="h-full bg-blue-500 rounded-full" style="width: @percentage%"></div>
                                    </div>
                                    <div class="mt-1 text-xs text-gray-400 text-right">@percentage.ToString("F0")% of goal</div>
                                </div>
                            </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public DepartmentSummary Summary { get; set; } = new DepartmentSummary();

    // Callback function passed from parent to handle value formatting
    [Parameter]
    public Func<string, object?, string> FormatValueCallback { get; set; } = (key, value) => value?.ToString() ?? "N/A";

    // Removed GetScoreColorClass
    // Removed internal GetMetricDisplayName
    // Removed internal FormatMetricValue
    // Removed GetMetricPercentage
}