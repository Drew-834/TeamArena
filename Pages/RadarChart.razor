@using GameScoreboard.Models
@inject IJSRuntime JSRuntime

<div class="radar-chart-container @CssClass" id="@ChartId">
    @if (Labels != null && NormalizedData != null && Labels.Count > 2 && NormalizedData.Count == Labels.Count)
    {
        <svg width="@Width" height="@Height" viewBox="0 0 250 250" class="radar-chart">
            <!-- Grid (scaled to 150 max) -->
            <g class="grid-lines">
                @for (int i = 1; i <= 5; i++)
                {
                    var points = GetPolygonPoints(i * 20); // 5 lines, up to 100%
                    <polygon points="@points" 
                             fill="none" 
                             stroke="#555555" 
                             stroke-width="0.5" 
                             stroke-opacity="0.7" />
                }
            </g>

            <!-- Axis Lines -->
            @for (int i = 0; i < Labels.Count; i++)
            {
                var x2 = GetAxisEndX(i);
                var y2 = GetAxisEndY(i);
                <line x1="125" y1="125" 
                      x2="@x2" y2="@y2" 
                      stroke="#666666" 
                      stroke-width="0.7" 
                      stroke-opacity="0.7" />
            }

            <!-- Metric Labels -->
            @for (int i = 0; i < Labels.Count; i++)
            {
                var x = GetLabelX(i);
                var y = GetLabelY(i);
                var anchor = GetTextAnchor(i);
                var baseline = GetDominantBaseline(i);
                var metricName = GetMetricShortName(Labels[i]);

                <g>
                    <text x="@x" 
                          y="@y" 
                          font-size="10" 
                          fill="#a3a3a3" 
                          text-anchor="@anchor" 
                          dominant-baseline="@baseline">@metricName</text>
                </g>
            }

            <!-- Data Polygon -->
            <polygon points="@GetDataPoints()" 
                     fill="rgba(255, 193, 7, 0.1)" 
                     stroke="#ffc107" 
                     stroke-width="2" />

            <!-- Data Points -->
            @for (int i = 0; i < Labels.Count; i++)
            {
                var cx = GetDataPointX(i);
                var cy = GetDataPointY(i);
                <circle cx="@cx" 
                        cy="@cy" 
                        r="3" 
                        fill="rgba(255, 193, 7, 0.4)" />
            }
        </svg>
    }
    else
    {
        <!-- Optional: Placeholder if data is insufficient -->
        <div style="width:@Width; height:@Height; display:flex; align-items:center; justify-content:center; color:#555;">
             <p>Chart data not available.</p>
        </div>
    }
</div>

@code {
    [Parameter] public string CssClass { get; set; } = "";
    [Parameter] public string Width { get; set; } = "250px";
    [Parameter] public string Height { get; set; } = "250px";

    // New Parameters
    [Parameter] public List<string>? Labels { get; set; }
    [Parameter] public List<double>? NormalizedData { get; set; }

    private string ChartId = $"radar-chart-{Guid.NewGuid()}";

    // Scale Factor: Map 100% normalized score to radius 100.
    // Scores > 100 will extend beyond the main grid.
    private double RadiusScaleFactor => 100.0 / 100.0; // Now 1.0

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("console.log", "Radar chart component rendered");
        }
    }

    // --- SVG Calculation Helpers (Adjusted for new parameters and scaling) --- 

    private string GetPolygonPoints(int radius)
    {
        // Grid lines now represent 20, 40, 60, 80, 100 percent/score
        if (Labels == null || !Labels.Any()) return "";
        var points = new List<string>();
        int count = Labels.Count;

        for (int i = 0; i < count; i++)
        {
            double angle = 2 * Math.PI * i / count - Math.PI / 2;
            double x = 125 + radius * Math.Cos(angle);
            double y = 125 + radius * Math.Sin(angle);
            points.Add($"{x.ToString("F2")},{y.ToString("F2")}");
        }
        return string.Join(" ", points);
    }

    private string GetDataPoints()
    {
        if (Labels == null || NormalizedData == null || Labels.Count != NormalizedData.Count) return "";
        var points = new List<string>();
        int count = Labels.Count;

        for (int i = 0; i < count; i++)
        {
            var x = GetDataPointX(i);
            var y = GetDataPointY(i);
            points.Add($"{x.ToString("F2")},{y.ToString("F2")}");
        }
        return string.Join(" ", points);
    }

    private double GetDataPointX(int index)
    {
        if (Labels == null || NormalizedData == null || index >= Labels.Count) return 125;
        int count = Labels.Count;
        double angle = 2 * Math.PI * index / count - Math.PI / 2;
        double normalizedValue = NormalizedData[index]; 
        // Use the scale factor directly, score is already capped at 100
        double radius = normalizedValue * RadiusScaleFactor; 
        return 125 + radius * Math.Cos(angle);
    }

    private double GetDataPointY(int index)
    {
        if (Labels == null || NormalizedData == null || index >= Labels.Count) return 125;
        int count = Labels.Count;
        double angle = 2 * Math.PI * index / count - Math.PI / 2;
        double normalizedValue = NormalizedData[index]; 
         // Use the scale factor directly, score is already capped at 100
        double radius = normalizedValue * RadiusScaleFactor; 
        return 125 + radius * Math.Sin(angle);
    }

    private double GetAxisEndX(int index)
    {
         if (Labels == null || !Labels.Any()) return 125;
         int count = Labels.Count;
        double angle = 2 * Math.PI * index / count - Math.PI / 2;
        return 125 + 100 * Math.Cos(angle); // Max radius of 100
    }

    private double GetAxisEndY(int index)
    {
         if (Labels == null || !Labels.Any()) return 125;
         int count = Labels.Count;
        double angle = 2 * Math.PI * index / count - Math.PI / 2;
        return 125 + 100 * Math.Sin(angle); // Max radius of 100
    }

    private double GetLabelX(int index)
    {
         if (Labels == null || !Labels.Any()) return 125;
         int count = Labels.Count;
        double angle = 2 * Math.PI * index / count - Math.PI / 2;
        return 125 + 115 * Math.Cos(angle); // Offset labels slightly outside grid
    }

    private double GetLabelY(int index)
    {
         if (Labels == null || !Labels.Any()) return 125;
         int count = Labels.Count;
        double angle = 2 * Math.PI * index / count - Math.PI / 2;
        return 125 + 115 * Math.Sin(angle); // Offset labels slightly outside grid
    }

    private string GetTextAnchor(int index)
    {
        if (Labels == null || !Labels.Any()) return "middle";
        int count = Labels.Count;
        double angle = 2 * Math.PI * index / count - Math.PI / 2;
        double x = Math.Cos(angle);

        if (Math.Abs(x) < 0.3) return "middle";
        return x > 0 ? "start" : "end";
    }

    private string GetDominantBaseline(int index)
    {
        if (Labels == null || !Labels.Any()) return "middle";
        int count = Labels.Count;
        double angle = 2 * Math.PI * index / count - Math.PI / 2;
        double y = Math.Sin(angle);

        if (Math.Abs(y) < 0.3) return "middle";
        return y > 0 ? "hanging" : "auto";
    }

    private string GetMetricShortName(string metricName)
    {
         // Simple shortening logic (take first word or abbreviation)
         if (metricName.Contains(" ")) return metricName.Split(' ')[0];
         if (metricName.Length > 6) return metricName.Substring(0, 4) + "."; // Shorten further
         return metricName;
    }
}