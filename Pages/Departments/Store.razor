@page "/departments/store"
@namespace GameScoreboard.Pages.Departments
@using GameScoreboard.Models
@using GameScoreboard.Services
@inject IDataService DataService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime // Added JSRuntime for carousel

<div class="bg-gray-900 min-h-screen text-white">
    <div class="container mx-auto px-4 py-8">
        <div class="flex justify-between items-center mb-6">
            <button @onclick="NavigateBack" class="px-4 py-2 bg-gray-700 text-yellow-400 rounded font-semibold hover:bg-gray-600 transition-colors">
                &lt; Back to Departments
            </button>
            <!-- Removed Weekly Tracker button for simplicity, can be added back if needed -->
        </div>

        @if (_teamMembers == null)
        {
                <div class="text-center">
                    <div class="inline-block animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-yellow-400"></div>
                    <p class="mt-2">Loading store data...</p>
                </div>
        }
        else if (!_teamMembers.Any())
        {
             <div class="text-center text-gray-500 mt-10">
                <p>No team members found for the Store department.</p>
                <p>(Ensure mock data exists in MockDataService)</p>
             </div>
        }
        else
        {
                <!-- Department Summary -->
                <DepartmentSummaryCard Summary="@_departmentSummary" FormatValueCallback="FormatMetricValue" />

                <div class="relative">
                    <!-- Carousel Controls -->
                    <button @onclick="ScrollLeft" class="absolute left-0 top-1/2 transform -translate-y-1/2 z-10 bg-gray-800 bg-opacity-70 p-3 rounded-r-lg text-yellow-400 hover:bg-opacity-90">
                        <span class="text-2xl">←</span>
                    </button>
                    <button @onclick="ScrollRight" class="absolute right-0 top-1/2 transform -translate-y-1/2 z-10 bg-gray-800 bg-opacity-70 p-3 rounded-l-lg text-yellow-400 hover:bg-opacity-90">
                        <span class="text-2xl">→</span>
                    </button>

                    <!-- Carousel Container -->
                    <div class="carousel-container overflow-x-hidden" @ref="carouselContainer">
                        <div class="carousel-inner flex space-x-4 transition-transform duration-500 ease-in-out" @ref="carouselInner">
                            @foreach (var member in _teamMembers)
                            {
                                <div class="character-card cursor-pointer flex-shrink-0" style="width: 180px;" 
                                     @onclick="() => NavigateToDetails(member.Id)">
                                    <div class="bg-gray-800 border-2 border-yellow-500 rounded-lg overflow-hidden shadow-lg h-80 relative">
                                        <!-- Background Avatar -->
                                        <div class="absolute inset-0 opacity-15 z-0">
                                            @if (!string.IsNullOrEmpty(member.AvatarUrl))
                                            {
                                                <img src="@member.AvatarUrl" alt="" class="w-full h-full object-cover" />
                                            }
                                            else
                                            {
                                                <div class="w-full h-full flex items-center justify-center bg-gray-700 text-8xl font-bold text-gray-600">
                                                    @member.Name[0]
                                                </div>
                                            }
                                        </div>

                                        <!-- Content -->
                                        <div class="p-3 relative z-10 flex flex-col h-full justify-between">
                                            <div>
                                                <h3 class="text-xl font-bold text-center mt-2">@member.Name</h3>
                                                <p class="text-yellow-400 text-center text-sm mt-1">@member.GetChampionTitle(_teamMembers)</p>
                                            </div>

                                            @{
                                                var strongestMetric = member.GetStrongestMetricRelativeToTeam(_teamAverages);
                                                var metricValue = member.GetMetricValue(strongestMetric);
                                                var metricName = TeamMember.GetMetricDisplayName(strongestMetric);
                                                var isBest = member.IsBestInMetric(strongestMetric, _teamMembers);
                                            }

                                            <div class="metric-highlight bg-gray-800 bg-opacity-80 border @(isBest ? "border-yellow-500" : "border-gray-600") rounded-md p-3 text-center mt-auto mb-6">
                                                <div class="text-xs text-gray-400">Strongest Metric</div>
                                                <div class="text-sm font-semibold">@metricName</div>
                                                <div class="text-xl font-bold @(isBest ? "text-yellow-400" : "text-white")">
                                                    @FormatMetricValue(strongestMetric, metricValue)
                                                    @if (isBest)
                                                    {
                                                        <span class="text-xs ml-1">★</span>
                                                    }
                                                </div>
                                            </div>

                                            <div class="text-center text-xs text-gray-400 absolute bottom-2 left-0 right-0">
                                                Tap to view details
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>

                    <!-- Pagination Indicators -->
                    <div class="flex justify-center mt-4 space-x-2">
                        @for (int i = 0; i < Math.Ceiling((double)_teamMembers.Count / itemsPerPage); i++)
                        {
                            int pageIndex = i;
                            <button @onclick="() => GoToPage(pageIndex)" 
                                    class="h-3 w-3 rounded-full @(currentPage == pageIndex ? "bg-yellow-400" : "bg-gray-600") transition-colors">
                            </button>
                        }
                    </div>
                </div>
        }
    </div>
</div>

@code {
    private List<TeamMember> _teamMembers = new List<TeamMember>();
    private ElementReference carouselContainer;
    private ElementReference carouselInner;
    private int currentPage = 0;
    private int itemsPerPage = 5; // Adjust as needed
    private DepartmentSummary _departmentSummary = new DepartmentSummary();
    private Dictionary<string, double> _teamAverages = new Dictionary<string, double>();

    protected override async Task OnInitializedAsync()
    {
        _teamMembers = await DataService.GetTeamMembersAsync("Store"); // Fetch Store data
        if (_teamMembers != null && _teamMembers.Any())
        {
            _departmentSummary = DepartmentSummary.CalculateSummary(_teamMembers);
            // Ensure AverageMetrics is not null before assignment
             if (_departmentSummary.AverageMetrics != null)
             {
                 _teamAverages = _departmentSummary.AverageMetrics;
             }
        }
         else
        {
             _teamMembers = new List<TeamMember>(); // Ensure list is not null if empty
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // Only init JS if there are members to display
        if (firstRender && _teamMembers != null && _teamMembers.Any())
        {
            await JSRuntime.InvokeVoidAsync("initCarousel", carouselContainer, carouselInner);
            // await JSRuntime.InvokeVoidAsync("initKeySequenceDetector"); // Removed for Store page, can add back if needed
        }
    }

    private void NavigateToDetails(int id)
    {
        NavigationManager.NavigateTo($"character/{id}");
    }

    private void NavigateBack()
    {
        NavigationManager.NavigateTo("/");
    }

    // --- Carousel Navigation --- 
    private async Task ScrollLeft()
    {
        if (currentPage > 0)
        {
            currentPage--;
            await ScrollToCurrentPage();
        }
    }

    private async Task ScrollRight()
    {
        int maxPage = (int)Math.Ceiling((double)_teamMembers.Count / itemsPerPage) - 1;
        if (currentPage < maxPage)
        {
            currentPage++;
            await ScrollToCurrentPage();
        }
    }

    private async Task GoToPage(int pageIndex)
    {
        currentPage = pageIndex;
        await ScrollToCurrentPage();
    }

    private async Task ScrollToCurrentPage()
    {
         if (_teamMembers != null && _teamMembers.Any())
         {
            await JSRuntime.InvokeVoidAsync("scrollCarouselToPage", carouselInner, currentPage, itemsPerPage);
         }
    }
    // --- End Carousel Navigation ---

    // Formatting logic copied from Computers.razor - Handles all known metric types
    private string FormatMetricValue(string metricKey, object? value)
    {
        if (value == null) return "N/A";

        return metricKey switch
        {
            "M365Attach" or "GSP" or "PMAttach" or "PickRate" =>
                value is double dPercent ? $"{dPercent:F1}%" :
                value is int iPercent ? $"{iPercent:F1}%" :
                value.ToString() + "?%",

            "Revenue" or "ASP" or "Basket" or "Pick$" =>
                value is double dCurrency ? $"${dCurrency:N2}" :
                value is int iCurrency ? $"${iCurrency:N0}" :
                "$" + value.ToString() + "?",

            "BP" or "PM" or "PickQuantity" =>
                value is int iCount ? iCount.ToString("N0") :
                value is double dCount ? ((int)dCount).ToString("N0") :
                value.ToString() + "?#",

            "5Star" =>
                value is double dRating ? dRating.ToString("F1") :
                value.ToString() + "?*",

            "Awk" =>
               value is double dMins ? $"{dMins:F1} min" :
               value is int iMins ? $"{iMins} min" :
               value.ToString() + "?min",

            "MVP" => value.ToString() ?? "N/A",

            _ => value.ToString() ?? "N/A"
        };
    }
} 