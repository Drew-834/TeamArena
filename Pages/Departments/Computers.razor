@page "/departments/computers"
@namespace GameScoreboard.Pages.Departments
@using GameScoreboard.Models
@using GameScoreboard.Services
@inject IDataService DataService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<div class="bg-gray-900 min-h-screen text-white">
    <div class="container mx-auto px-4 py-8">
        <div class="flex justify-between items-center mb-6">
            <button @onclick="NavigateBack" class="px-4 py-2 bg-gray-700 text-yellow-400 rounded font-semibold hover:bg-gray-600 transition-colors">
                &lt; Back to Departments
            </button>
            <button id="weekly-tracker-btn" @onclick="NavigateToWeeklyTracker" class="hidden px-4 py-2 bg-yellow-500 text-gray-900 rounded font-semibold hover:bg-yellow-400 transition-colors">
                Weekly Tracker
            </button>
        </div>

        @if (_teamMembers == null)
        {
                <div class="text-center">
                    <div class="inline-block animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-yellow-400"></div>
                    <p class="mt-2">Loading champions...</p>
                </div>
        }
        else
        {
                <!-- Department Summary -->
                <DepartmentSummaryCard Summary="@_departmentSummary" FormatValueCallback="FormatMetricValue" />

                <div class="relative">
                    <!-- Carousel Controls -->
                    <button @onclick="ScrollLeft" class="absolute left-0 top-1/2 transform -translate-y-1/2 z-10 bg-gray-800 bg-opacity-70 p-3 rounded-r-lg text-yellow-400 hover:bg-opacity-90">
                        <span class="text-2xl">←</span>
                    </button>

                    <button @onclick="ScrollRight" class="absolute right-0 top-1/2 transform -translate-y-1/2 z-10 bg-gray-800 bg-opacity-70 p-3 rounded-l-lg text-yellow-400 hover:bg-opacity-90">
                        <span class="text-2xl">→</span>
                    </button>

                    <!-- Carousel Container -->
                    <div class="carousel-container overflow-x-hidden" @ref="carouselContainer">
                        <div class="carousel-inner flex space-x-4 transition-transform duration-500 ease-in-out" @ref="carouselInner">
                        @foreach (var member in _teamMembers)
                        {
                                    @* Carousel Item - Character Card *@
                                    <div class="character-card cursor-pointer flex-shrink-0 relative bg-gray-800 border-2 border-yellow-500 rounded-lg overflow-hidden shadow-lg transition-transform duration-300 hover:scale-105 m-2" 
                                         style="width: 200px; height: 320px;" 
                                         @onclick="() => NavigateToDetails(member.Id)"> @* Adjusted size slightly *@
                                        
                                        <!-- Background Avatar (translucent) -->
                                        <div class="absolute inset-0 opacity-20 z-0">
                                            @if (!string.IsNullOrEmpty(member.AvatarUrl))
                                            {
                                                <img src="@member.AvatarUrl" alt="" class="w-full h-full object-cover" />
                                            }
                                            else
                                            {
                                                <div class="w-full h-full flex items-center justify-center bg-gray-700 text-8xl font-bold text-gray-600">
                                                    @member.Name[0]
                                                </div>
                                            }
                                        </div>

                                        <!-- Content (foreground) -->
                                        <div class="relative z-10 p-3 flex flex-col h-full justify-between">
                                            <div>
                                                <h3 class="text-xl font-bold text-center mt-2">@member.Name</h3>
                                                 @{ 
                                                     // Use the title generation logic from TeamMember model
                                                     var title = member.GetChampionTitle(_teamMembers); 
                                                 }
                                                <p class="text-yellow-400 text-center text-sm mt-1">@title</p>
                                            </div>

                                            @* Strongest Area moved just above Leveling *@
                                            <div class="pt-4">
                                                 @{ 
                                                    var strongest = member.GetStrongestMetricRelativeToTeam(_teamAverages);
                                                    var metricValue = member.GetMetricValue(strongest);
                                                    var metricName = !string.IsNullOrEmpty(strongest) ? TeamMember.GetMetricDisplayName(strongest) : "Overall";
                                                    var isBest = member.IsBestInMetric(strongest, _teamMembers);
                                                }
                                                <div class="metric-highlight bg-gray-800 bg-opacity-80 border @(isBest ? "border-yellow-500" : "border-gray-600") rounded-md p-3 text-center">
                                                    <div class="text-xs text-gray-400">Strongest Area</div>
                                                    <div class="text-sm font-semibold">@metricName</div>
                                                    <div class="text-lg font-bold @(isBest ? "text-yellow-400" : "text-white")">
                                                        @if (!string.IsNullOrEmpty(strongest))
                                                        {
                                                             @FormatMetricValue(strongest, metricValue)
                                                             @if (isBest)
                                                             {
                                                                <span class="text-xs ml-1">★</span>
                                                             }
                                                        }
                                                        else
                                                        {
                                                            <span>Balanced</span>
                                                        }
                                                    </div>
                                                </div>
                                            </div>

                                            @* Leveling System Display at the bottom *@
                                            <div>
                                                 <div class="flex justify-between items-center text-sm mb-1 px-1">
                                                     <span class="font-bold text-purple-400">Level @member.CurrentLevel</span>
                                                     <span class="text-xs text-gray-400">@member.ExperienceTowardsNextLevel.ToString("F0") / @member.ExperienceNeededForNextLevel.ToString("F0") XP</span>
                                                 </div>
                                                 <div class="h-2 bg-gray-600 bg-opacity-50 rounded-full overflow-hidden mx-1">
                                                     <div class="h-full bg-purple-500 rounded-full" style="width: @member.ProgressToNextLevelPercentage.ToString("F1")%;"></div>
                                                 </div>
                                            </div>
                                        </div>
                                    </div>
                        }
                        </div>
                    </div>

                    <!-- Pagination Indicators -->
                    <div class="flex justify-center mt-4 space-x-2">
                    @for (int i = 0; i < Math.Ceiling((double)_teamMembers.Count / itemsPerPage); i++)
                    {
                        int pageIndex = i;
                                <button @onclick="() => GoToPage(pageIndex)" 
                                class="h-3 w-3 rounded-full @(currentPage == pageIndex ? "bg-yellow-400" : "bg-gray-600") transition-colors">
                                </button>
                    }
                    </div>
                </div>
        }
    </div>
</div>

@code {
    private List<TeamMember> _teamMembers = new List<TeamMember>();
    private ElementReference carouselContainer;
    private ElementReference carouselInner;
    private int currentPage = 0;
    private int itemsPerPage = 5; // Adjust as needed, maybe based on container width
    private DepartmentSummary _departmentSummary = new DepartmentSummary();
    private Dictionary<string, double> _teamAverages = new Dictionary<string, double>();

    protected override async Task OnInitializedAsync()
    {
        _teamMembers = await DataService.GetTeamMembersAsync("Computers"); // Assuming DataService can filter by department
        if (_teamMembers.Any())
        {
            _departmentSummary = DepartmentSummary.CalculateSummary(_teamMembers);
            _teamAverages = _departmentSummary.AverageMetrics;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && _teamMembers.Any())
        {
            await JSRuntime.InvokeVoidAsync("initCarousel", carouselContainer, carouselInner);
            await JSRuntime.InvokeVoidAsync("initKeySequenceDetector");
        }
    }

    private void NavigateToDetails(int id)
    {
        // Assuming character detail URLs are consistent, might need adjustment
        NavigationManager.NavigateTo($"character/{id}"); 
    }

    private void NavigateToWeeklyTracker()
    {
        // Might need to pass department context or have a generic tracker
        NavigationManager.NavigateTo("weekly-tracker"); 
    }

    private void NavigateBack()
    {
        NavigationManager.NavigateTo("/");
    }

    private async Task ScrollLeft()
    {
        if (currentPage > 0)
        {
            currentPage--;
            await ScrollToCurrentPage();
        }
    }

    private async Task ScrollRight()
    {
        // Calculate maxPage based on actual items and itemsPerPage
        int maxPage = (int)Math.Ceiling((double)_teamMembers.Count / itemsPerPage) - 1; 
        if (currentPage < maxPage)
        {
            currentPage++;
            await ScrollToCurrentPage();
        }
    }

    private async Task GoToPage(int pageIndex)
    {
        currentPage = pageIndex;
        await ScrollToCurrentPage();
    }

    private async Task ScrollToCurrentPage()
    {
        await JSRuntime.InvokeVoidAsync("scrollCarouselToPage", carouselInner, currentPage, itemsPerPage);
    }

    private string FormatMetricValue(string metricKey, object? value)
    {
        if (value == null) return "N/A";

        // Use switch expression for clarity
        return metricKey switch
        {
            // --- Percentages (Computers, Store, Front, Warehouse) ---
            "M365Attach" or "GSP" or "PMAttach" or "PickRate" =>
                value is double dPercent ? $"{dPercent:F1}%" :
                value is int iPercent ? $"{iPercent:F1}%" :
                value.ToString() + "?%", // Fallback if type mismatch

            // --- Currency (Computers, Store, Warehouse) ---
            "Revenue" or "ASP" or "Basket" or "Pick$" =>
                value is double dCurrency ? $"${dCurrency:N2}" :
                value is int iCurrency ? $"${iCurrency:N0}" :
                "$" + value.ToString() + "?", // Fallback

             // --- Simple Integers (Front, Warehouse) ---
            "BP" or "PM" or "PickQuantity" =>
                value is int iCount ? iCount.ToString("N0") :
                value is double dCount ? ((int)dCount).ToString("N0") : // Attempt cast
                value.ToString() + "?#", // Fallback

            // --- Ratings (Store, Front) ---
             "5Star" =>
                 value is double dRating ? dRating.ToString("F1") :
                 value.ToString() + "?*", // Fallback

             // --- Time (Warehouse) ---
             "Awk" =>
                value is double dMins ? $"{dMins:F1} min" :
                value is int iMins ? $"{iMins} min" :
                value.ToString() + "?min", // Fallback

             // --- String / Other (Warehouse MVP) ---
             "MVP" => value.ToString() ?? "N/A",

            // --- Default/Fallback for unknown keys ---
            _ => value.ToString() ?? "N/A"
        };
    }
} 