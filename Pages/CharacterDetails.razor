private string GetFormattedMetricName(string metricKey)
    {
        var displayName = TeamMember.GetMetricDisplayName(metricKey);
        return displayName.Split(' ')[0]; // Return just the first word for brevity
    }
@page "/character/{Id:int}"
@namespace GameScoreboard.Pages
@using GameScoreboard.Models
@using GameScoreboard.Services
@inject IDataService DataService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<div class="bg-gray-900 min-h-screen text-white">
    <div class="container mx-auto px-4 py-8">
        @if (_teamMember == null)
        {
            <div class="text-center py-12">
                <div class="inline-block animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-yellow-400"></div>
                <p class="mt-2">Loading champion data...</p>
            </div>
        }
        else
        {
            <div class="mb-4">
                <button @onclick="NavigateBack" class="flex items-center text-yellow-400 hover:text-yellow-300 transition-colors duration-200">
                    <span class="mr-2">←</span> Back to Champions
                </button>
            </div>

            <div @ref="detailsContainer" id="character-details-container" class="bg-gray-800 border-2 border-yellow-500 rounded-lg overflow-hidden shadow-lg relative">
                <!-- Full-size background avatar with low opacity -->
                <div class="absolute top-0 right-0 w-1/2 h-full opacity-10 z-0">
                    @if (!string.IsNullOrEmpty(_teamMember.AvatarUrl))
                    {
                        <img src="@_teamMember.AvatarUrl" alt="" class="w-full h-full object-cover" />
                    }
                    else
                    {
                        <div class="w-full h-full flex items-center justify-center bg-gray-700 text-9xl font-bold text-gray-600">
                            @_teamMember.Name[0]
                        </div>
                    }
                </div>
                
                <!-- Radar chart in background -->
                <div class="absolute top-0 right-0 w-1/2 h-full opacity-40 z-0 flex items-center justify-center">
                    <RadarChart 
                        TeamMember="@_teamMember" 
                        TeamAverages="@_teamAverages" 
                        MetricMaxValues="@_metricMaxValues"
                        Width="300px"
                        Height="300px" />
                </div>
                
                <div class="p-6 flex flex-col md:flex-row relative z-10">
                    <!-- Metrics Section - Left Side -->
                    <div class="md:w-3/5 pr-8">
                        <div class="flex items-center mb-6">
                            <div class="mr-4">
                                <div class="rounded-full overflow-hidden w-16 h-16 bg-gray-700 border-2 border-yellow-400">
                                    @if (!string.IsNullOrEmpty(_teamMember.AvatarUrl))
                                    {
                                        <img src="@_teamMember.AvatarUrl" alt="@_teamMember.Name" class="w-full h-full object-cover" />
                                    }
                                    else
                                    {
                                        <div class="w-full h-full flex items-center justify-center bg-gray-700 text-2xl font-bold">
                                            @_teamMember.Name[0]
                                        </div>
                                    }
                                </div>
                            </div>
                            <div>
                                <h1 class="text-3xl font-bold">@_teamMember.Name</h1>
                                <p class="text-xl text-yellow-400">@_teamMember.GetChampionTitle(_allTeamMembers)</p>
                            </div>
                        </div>
                        
                        <h2 class="text-2xl font-bold mb-4 text-yellow-400 border-b border-yellow-500 pb-2">Performance Metrics</h2>
                        
                        <div class="space-y-6">
                            @foreach (var metric in _teamMember.GetAllMetrics().OrderBy(m => TeamMember.GetMetricDisplayName(m.Key)))
                            {
                                @if (_teamMember.GetMetricDoubleValue(metric.Key).HasValue)
                                {
                                    <div class="bg-gray-800 bg-opacity-80 rounded-md p-4 border-l-4 @GetMetricBorderClass(metric.Key, metric.Value)">
                                        <div class="flex justify-between items-center mb-2">
                                            <div>
                                                <div class="text-lg font-semibold flex items-center">
                                                    @TeamMember.GetMetricDisplayName(metric.Key)
                                                    @if (IsTopPerformer(metric.Key))
                                                    {
                                                        <span class="ml-2 text-yellow-400 text-sm font-bold px-2 py-0.5 bg-yellow-900 bg-opacity-50 rounded-full">BEST</span>
                                                    }
                                                    @if (IsBottomPerformer(metric.Key))
                                                    {
                                                        <span class="ml-2 text-red-400 text-sm font-bold px-2 py-0.5 bg-red-900 bg-opacity-50 rounded-full">LOWEST</span>
                                                    }
                                                </div>
                                                <div class="text-sm text-gray-400">
                                                    Team Avg: @FormatMetricValue(metric.Key, GetTeamAverage(metric.Key))
                                                </div>
                                            </div>
                                            <div class="text-xl font-bold @GetMetricValueClass(metric.Key, metric.Value)">
                                                @FormatMetricValue(metric.Key, metric.Value)
                                            </div>
                                        </div>
                                        
                                        <!-- Metric Bar with Avg Marker -->
                                        <div class="mt-2 bg-gray-800 rounded-full h-4 overflow-hidden relative">
                                            <div class="@GetMetricBarClass(metric.Key, metric.Value) h-full rounded-full" 
                                                 style="width: @GetMetricBarWidth(metric.Key, metric.Value)"></div>
                                            
                                            <!-- Team Average Marker -->
                                            <div class="absolute top-0 bottom-0 w-0.5 bg-white opacity-70"
                                                 style="left: @GetAverageMarkerPosition(metric.Key)"></div>
                                        </div>
                                        
                                        <!-- Performance Score -->
                                        <div class="mt-1 flex justify-between text-xs">
                                            <span>Min: @FormatMetricValue(metric.Key, GetMetricMinValue(metric.Key))</span>
                                            <span class="text-gray-400">Score: @GetPerformanceScore(metric.Key, metric.Value).ToString("F0")</span>
                                            <span>Max: @FormatMetricValue(metric.Key, GetMetricMaxValue(metric.Key))</span>
                                        </div>
                                    </div>
                                }
                                else
                                {
                                    if(metric.Key == "MVP")
                                    {
                                        <div class="bg-gray-800 bg-opacity-80 rounded-md p-4 border-l-4 border-gray-600">
                                             <div class="flex justify-between items-center">
                                                <span class="text-lg font-semibold">@TeamMember.GetMetricDisplayName(metric.Key)</span>
                                                <span class="text-xl font-bold">@FormatMetricValue(metric.Key, metric.Value)</span>
                                             </div>
                                        </div>
                                    }
                                }
                            }
                        </div>
                    </div>
                    
                    <!-- Character Profile Section - Right Side -->
                    <div class="md:w-2/5 mt-8 md:mt-0 md:pl-6">
                        <div class="mb-8 bg-gray-800 bg-opacity-60 p-6 rounded-lg border border-gray-700">
                            <h3 class="text-xl font-bold mb-4 text-yellow-400">Champion Stats</h3>
                            
                            <div class="space-y-3">
                                <div class="flex justify-between">
                                    <span class="text-gray-400">Overall Rank:</span>
                                    <span class="font-bold">#@GetOverallRank() of @_allTeamMembers.Count(m => m.Department == _teamMember.Department)</span>
                                </div>
                                
                                <div class="flex justify-between">
                                    <span class="text-gray-400">Strongest Area:</span>
                                    @{ 
                                        var strongest = _teamMember.GetStrongestMetricRelativeToTeam(_teamAverages);
                                        var strongestDisplayName = string.IsNullOrEmpty(strongest) ? "N/A" : TeamMember.GetMetricDisplayName(strongest);
                                    }
                                    <span class="font-bold">@strongestDisplayName</span>
                                </div>
                                
                                <div class="flex justify-between">
                                    <span class="text-gray-400">Top Categories:</span>
                                    <span class="font-bold">@GetTopCategories()</span>
                                </div>
                                
                                <div class="flex justify-between">
                                    <span class="text-gray-400">Needs Improvement:</span>
                                    <span class="font-bold">@GetImprovedCategories()</span>
                                </div>
                                
                                <div class="flex justify-between">
                                    <span class="text-gray-400">Performance Score:</span>
                                    <span class="font-bold">@GetTotalPerformanceScore().ToString("F0") / 100</span>
                                </div>
                            </div>
                        </div>
                         <!-- Radar chart moved to right side -->
                        <div class="flex justify-center items-center h-64 bg-gray-800 bg-opacity-40 p-4 rounded-lg border border-gray-700">
                             @if(_teamMember.Metrics.Keys.Count(k => _teamMember.GetMetricDoubleValue(k).HasValue) > 2) // Need at least 3 numeric points for radar
                             {
                                <RadarChart 
                                    TeamMember="@_teamMember" 
                                    TeamAverages="@_teamAverages" 
                                    AllTeamMembers="@_allTeamMembers"
                                    Width="280px"
                                    Height="280px" />
                             }
                             else
                             {
                                 <p class="text-gray-500 text-center">Not enough numeric data points for Radar Chart.</p>
                             }
                         </div>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@code {
    [Parameter]
    public int Id { get; set; }
    
    private TeamMember _teamMember = new TeamMember();
    private List<TeamMember> _allTeamMembers = new List<TeamMember>();
    private Dictionary<string, double> _teamAverages = new Dictionary<string, double>();
    private ElementReference detailsContainer;
    private Dictionary<string, double> _metricMaxValues = new Dictionary<string, double> {
               { "M365Attach", 30 },
               { "GSP", 20 },
               { "Revenue", 20000 },
               { "ASP", 800 },
               { "Basket", 160 },
               { "PMAttach", 25 }
    };
    
    protected override async Task OnInitializedAsync()
    {
        _allTeamMembers = await DataService.GetTeamMembersAsync();
        var foundMember = _allTeamMembers.FirstOrDefault(m => m.Id == Id);
        if (foundMember != null)
        {
            _teamMember = foundMember;
        }
        CalculateTeamAverages();
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && _teamMember != null)
        {
            try
            {
                // Add a delay to ensure the DOM is fully rendered
                await Task.Delay(300);
                
                // Try to scroll to the element
                await JSRuntime.InvokeVoidAsync("scrollToCenter", detailsContainer);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error scrolling: {ex.Message}");
            }
        }
    }
    
    private void CalculateTeamAverages()
    {
        if (!_allTeamMembers.Any()) return;

        _teamAverages = new Dictionary<string, double>();
        // Get all unique metric keys across all members
        var allMetricKeys = _allTeamMembers.SelectMany(m => m.Metrics.Keys).Distinct();

        foreach (var key in allMetricKeys)
        {
            var values = _allTeamMembers
                .Select(m => m.GetMetricDoubleValue(key)) // Use helper
                .Where(v => v.HasValue)                // Filter out nulls (non-numeric)
                .Select(v => v.Value)                  // Get the double value
                .ToList();

            if (values.Any())
            {
                _teamAverages[key] = values.Average();
            }
            // else: metric was non-numeric or absent, skip average calculation
        }
    }
    
    private void NavigateBack()
    {
        NavigationManager.NavigateTo($"/departments/{_teamMember?.Department?.ToLower() ?? "computers"}"); // Navigate back to the member's department
    }
    
    private bool IsTopPerformer(string metricKey)
    {
        return _teamMember?.IsBestInMetric(metricKey, _allTeamMembers) ?? false;
    }
    
    private bool IsBottomPerformer(string metricKey)
    {
        return _teamMember?.IsWorstInMetric(metricKey, _allTeamMembers) ?? false;
    }
    
    private double GetTeamAverage(string metricKey)
    {
        return _teamAverages.TryGetValue(metricKey, out var avg) ? avg : 0;
    }
    
    private string GetMetricBarClass(string metricKey, object? value)
    {
        if (IsTopPerformer(metricKey))
            return "bg-yellow-400";
        else if (IsBottomPerformer(metricKey))
            return "bg-red-400";
        else if (value is double dValue && dValue > GetTeamAverage(metricKey))
            return "bg-blue-500";
        else
            return "bg-blue-400";
    }
    
    private string GetMetricBorderClass(string metricKey, object? value)
    {
        if (IsTopPerformer(metricKey))
            return "border-yellow-400";
        else if (IsBottomPerformer(metricKey))
            return "border-red-400";
        else if (value is double dValue && dValue > GetTeamAverage(metricKey))
            return "border-blue-500";
        else
            return "border-gray-600";
    }
    
    private string GetMetricValueClass(string metricKey, object? value)
    {
        if (IsTopPerformer(metricKey))
            return "text-yellow-400";
        else if (IsBottomPerformer(metricKey))
            return "text-red-400";
        else if (value is double dValue && dValue > GetTeamAverage(metricKey))
            return "text-blue-400";
        else
            return "text-white";
    }
    
    private string GetMetricBarWidth(string metricKey, object? value)
    {
        if (value == null) return "0%";
        double? numericValue = _teamMember.GetMetricDoubleValue(metricKey);
        if (!numericValue.HasValue) return "0%";

        double max = GetMetricMaxValue(metricKey);
        double min = GetMetricMinValue(metricKey);
        double range = max - min;
        
        if (range <= 0) return numericValue > 0 ? "100%" : "0%";

        double percentage = Math.Min(Math.Max(((numericValue.Value - min) / range) * 100, 0), 100);
        return $"{percentage:F1}%";
    }
    
    private string GetAverageMarkerPosition(string metricKey)
    {
        double average = GetTeamAverage(metricKey);
        double max = GetMetricMaxValue(metricKey);
         double min = GetMetricMinValue(metricKey);
        double range = max - min;

        if (range <= 0) return "50%";

        double percentage = Math.Min(Math.Max(((average - min) / range) * 100, 0), 100);
        return $"{percentage:F1}%";
    }
    
    private double GetMetricMaxValue(string metricKey)
    {
        return _allTeamMembers
            .Where(m => m.Department == _teamMember.Department)
            .Select(m => m.GetMetricDoubleValue(metricKey))
            .Where(v => v.HasValue)
            .DefaultIfEmpty(0)
            .Max() ?? 0;
    }
    
    private double GetMetricMinValue(string metricKey)
    {
        return _allTeamMembers
            .Where(m => m.Department == _teamMember.Department)
            .Select(m => m.GetMetricDoubleValue(metricKey))
            .Where(v => v.HasValue)
            .DefaultIfEmpty(0)
            .Min() ?? 0;
    }
    
    private double GetPerformanceScore(string metricKey, object? value)
    {
        double? numericValue = _teamMember.GetMetricDoubleValue(metricKey);
        if (!numericValue.HasValue) return 50;

        double average = GetTeamAverage(metricKey);
        if (average == 0) return numericValue > 0 ? 100 : 50;

        bool lowerIsBetter = metricKey.Equals("Awk", StringComparison.OrdinalIgnoreCase);

        double score;
        if (lowerIsBetter)
        {
            if (numericValue.Value == 0) return 100;
            score = (average / numericValue.Value) * 50;
        }
        else
        {
            score = (numericValue.Value / average) * 50;
        }

        return Math.Min(Math.Max(score, 0), 100);
    }
    
    private int GetOverallRank()
    {
        if (_teamMember == null || !_allTeamMembers.Any()) return 1;

        var departmentMembers = _allTeamMembers.Where(m => m.Department == _teamMember.Department).ToList();
        var scores = departmentMembers.Select(m => new 
            {
                 MemberId = m.Id,
                 // Handle empty metrics, calculate average score
                 Score = m.Metrics.Any() ? 
                         m.Metrics.Keys.Average(key => GetPerformanceScore(key, m.GetMetricValue(key))) : 
                         0.0 // Default score if member has no metrics
            })
             .OrderByDescending(s => s.Score)
             .ToList();

        var rank = scores.FindIndex(s => s.MemberId == _teamMember.Id) + 1;
        return rank > 0 ? rank : departmentMembers.Count;
    }
    
    private string GetTopCategories(int count = 2)
    {
        if (_teamMember == null) return "N/A";

        var topMetrics = _teamMember.Metrics
            .Select(kv => new { Key = kv.Key, Score = GetPerformanceScore(kv.Key, kv.Value) })
            .OrderByDescending(m => m.Score)
            .Take(count)
            .Select(m => TeamMember.GetMetricDisplayName(m.Key).Split(' ')[0])
            .ToList();

        return topMetrics.Any() ? string.Join(", ", topMetrics) : "N/A";
    }
    
    private string GetImprovedCategories(int count = 2)
    {
        if (_teamMember == null) return "N/A";

        var bottomMetrics = _teamMember.Metrics
           .Select(kv => new { Key = kv.Key, Score = GetPerformanceScore(kv.Key, kv.Value) })
           .OrderBy(m => m.Score)
           .Take(count)
           .Select(m => TeamMember.GetMetricDisplayName(m.Key).Split(' ')[0])
           .ToList();

        return bottomMetrics.Any() ? string.Join(", ", bottomMetrics) : "N/A";
    }
    
    private double GetTotalPerformanceScore()
    {
        if (_teamMember == null || !_teamMember.Metrics.Any()) return 0;

        return _teamMember.Metrics.Average(kv => GetPerformanceScore(kv.Key, kv.Value));
    }
    
    private string GetFormattedMetricName(string metricKey)
    {
        var displayName = TeamMember.GetMetricDisplayName(metricKey);
        return displayName.Split(' ')[0]; // Return just the first word for brevity
    }
    
    private string FormatMetricValue(string metricKey, object? value)
    {
        if (value == null) return "N/A";

        return metricKey switch
        {
            "M365Attach" or "GSP" or "PMAttach" or "PickRate" =>
                value is double dPercent ? $"{dPercent:F1}%" :
                value is int iPercent ? $"{iPercent:F1}%" :
                value.ToString() + "?%",
            "Revenue" or "ASP" or "Basket" or "Pick$" =>
                value is double dCurrency ? $"${dCurrency:N2}" :
                value is int iCurrency ? $"${iCurrency:N0}" :
                "$" + value.ToString() + "?",
            "BP" or "PM" or "PickQuantity" =>
                value is int iCount ? iCount.ToString("N0") :
                value is double dCount ? ((int)dCount).ToString("N0") :
                value.ToString() + "?#",
            "5Star" =>
                value is double dRating ? dRating.ToString("F1") :
                value.ToString() + "?*",
            "Awk" =>
               value is double dMins ? $"{dMins:F1} min" :
               value is int iMins ? $"{iMins} min" :
               value.ToString() + "?min",
            "MVP" => value.ToString() ?? "N/A",
            _ => value.ToString() ?? "N/A"
        };
    }
}