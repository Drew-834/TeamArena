@inherits LayoutComponentBase
@inject IJSRuntime JSRuntime

<div class="relative min-h-screen bg-gray-900">
    
    @* Render the body only if terms are accepted *@
    @if (_termsAccepted)
    {
        <main class="@(_showTermsModal ? "filter blur-sm" : "") transition-all duration-300">
            @Body
        </main>
    }
    else
    {
        @* Optional: Show a loading indicator or placeholder while checking acceptance *@
        <div class="flex items-center justify-center h-screen">
            <div class="inline-block animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-yellow-400"></div>
        </div>
    }

    <TermsOfUseModal IsVisible="_showTermsModal" OnAccepted="HandleTermsAccepted" />

    @* Optional: Add a copyright footer *@
    <footer class="absolute bottom-0 left-0 w-full text-center text-gray-600 text-xs p-2 @(_showTermsModal ? "filter blur-sm" : "") transition-all duration-300">
        &copy; @DateTime.Now.Year Drew Carrillo. All Rights Reserved.
    </footer>
</div>

@code {
    private bool _termsAccepted = false;
    private bool _showTermsModal = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                // Check localStorage to see if terms were already accepted in this browser
                var accepted = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "termsAccepted");
                if (accepted == "true")
                {
                    _termsAccepted = true;
                    _showTermsModal = false;
                }
                else
                {
                    _termsAccepted = false;
                    // Delay showing modal slightly for better visual effect
                    await Task.Delay(200);
                    _showTermsModal = true;
                }
            }
            catch (Exception ex) // Handle potential JS interop errors
            {
                Console.WriteLine($"Error checking localStorage for terms acceptance: {ex.Message}");
                // Default to showing the modal if localStorage access fails
                 _termsAccepted = false;
                 await Task.Delay(200);
                 _showTermsModal = true;
            }
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task HandleTermsAccepted()
    {
        _termsAccepted = true;
        _showTermsModal = false;
        try
        {
            // Store acceptance in localStorage
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", "termsAccepted", "true");
        }
        catch (Exception ex)
        {
             Console.WriteLine($"Error setting localStorage for terms acceptance: {ex.Message}");
        }
        StateHasChanged();
    }
}