name: Deploy to GitHub Pages

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '7.0.x'
        
    - name: Publish .NET Project
      run: dotnet publish GameScoreboard.csproj -c Release -o release --nologo
    
    - name: List release directory
      run: ls -la release
      
    - name: Prepare deployment directory
      run: |
        # Create deployment directory
        mkdir -p release/deploy
        
        # Copy the original wwwroot directory contents
        echo "Copying wwwroot files..."
        cp -r wwwroot/* release/deploy/
        
        # Find and copy the _framework directory from the published output
        FRAMEWORK_PATH=$(find release -type d -name "_framework" | head -n 1)
        if [ -z "$FRAMEWORK_PATH" ]; then
          echo "_framework directory not found!"
          exit 1
        fi
        echo "Found _framework at $FRAMEWORK_PATH"
        cp -r $FRAMEWORK_PATH release/deploy/
        
        # Find and copy the published index.html file
        INDEX_HTML=$(find release -name "index.html" | head -n 1)
        if [ -z "$INDEX_HTML" ]; then
          echo "index.html not found!"
          exit 1
        fi
        echo "Found index.html at $INDEX_HTML"
        cp $INDEX_HTML release/deploy/
        
        # Copy any other published content directories if they exist
        for dir in css js images; do
          if [ -d "release/wwwroot/$dir" ]; then
            echo "Copying published $dir directory..."
            cp -r release/wwwroot/$dir release/deploy/
          fi
        done
        
        # Ensure avatar images are copied
        echo "Checking for avatar images..."
        mkdir -p release/deploy/images/avatars
        chmod 755 release/deploy/images/avatars

        # Enhanced avatar image handling - first copy from wwwroot
        if [ -d "wwwroot/images/avatars" ]; then
          echo "Copying avatars from wwwroot/images/avatars"
          cp -rfv wwwroot/images/avatars/* release/deploy/images/avatars/ || echo "Copy failed but continuing"
          chmod -R 755 release/deploy/images/avatars
        fi

        # If no avatars found in wwwroot, search the repository and copy
        if [ -z "$(ls -A release/deploy/images/avatars 2>/dev/null)" ]; then
          echo "No avatars found in wwwroot, searching entire repository..."
          find . -path "*/images/avatars/*.png" -exec cp -v {} release/deploy/images/avatars/ \; || echo "Find and copy failed but continuing"
          chmod -R 755 release/deploy/images/avatars
        fi

        # Create placeholder avatars if still empty
        if [ -z "$(ls -A release/deploy/images/avatars 2>/dev/null)" ]; then
          echo "No avatar images found. Creating placeholders with ImageMagick..."
          
          # List available colors to verify ImageMagick is working
          convert -list color | head -5
          
          # Create simple placeholders with character names embedded
          cd release/deploy/images/avatars
          for name in adam1 ruben1 ishack2 drew1 vinny2 matthew1 jon1 gustavo1 avatar4 kla1; do
            echo "Creating placeholder for $name"
            convert -size 200x200 -background blue -fill white -gravity center -font Arial label:"${name:0:1}" ${name}.png || echo "Failed to create ${name}.png"
          done
          cd ../../../../
        fi
        
        # Show what avatar images we have
        echo "Avatar images in deployment directory:"
        ls -la release/deploy/images/avatars/
        
        # List the original wwwroot directory
        echo "Original wwwroot contents:"
        ls -la wwwroot
        if [ -d "wwwroot/images" ]; then
          echo "Contents of wwwroot/images:"
          ls -la wwwroot/images
          if [ -d "wwwroot/images/avatars" ]; then
            echo "Contents of wwwroot/images/avatars:"
            ls -la wwwroot/images/avatars
          fi
        fi
        
        # List the final deployment directory
        echo "Final deployment directory contents:"
        ls -la release/deploy
        echo "Contents of release/deploy/images (if exists):"
        ls -la release/deploy/images || echo "images directory not found"
        echo "Contents of release/deploy/images/avatars (if exists):"
        ls -la release/deploy/images/avatars || echo "avatars directory not found"
        
        # Check for specific files
        echo "Checking for specific files in deployment directory:"
        find release/deploy -name "app.js" || echo "app.js not found"
        find release/deploy -name "app.css" || echo "app.css not found"
        echo "Checking for avatar PNG files:"
        find release/deploy -name "*.png" | head -n 15 || echo "No PNG files found"
    
    # Update the base href in index.html
    - name: Update base href
      run: |
        sed -i 's|<base href=.*/>|<base href="/TeamArena/" />|' release/deploy/index.html
        grep "<base" release/deploy/index.html
    
    # Install ImageMagick for avatar placeholder creation
    - name: Setup ImageMagick
      run: |
        sudo apt-get update
        sudo apt-get install -y imagemagick
        convert --version
    
    # Create placeholder avatars if needed
    - name: Create placeholder avatars
      run: |
        mkdir -p release/deploy/images/avatars
        cd release/deploy/images/avatars
        # Check if there are already avatars
        if [ -z "$(ls -A . 2>/dev/null)" ]; then
          echo "Creating placeholder avatars..."
          # Create colored placeholder avatars
          for name in adam1 ruben1 ishack2 drew1 vinny2 matthew1 jon1 gustavo1 avatar4 kla1; do
            convert -size 200x200 xc:blue ${name}.png
          done
        fi
        cd ../../../../
        echo "Avatar images in deployment directory:"
        ls -la release/deploy/images/avatars/
    
    # Add Content Security Policy and improve SPA handling
    - name: Update index.html with security headers and SPA settings
      run: |
        # Add CSP meta tag to allow necessary resources with more permissive font policy
        sed -i 's|<meta name="description"|<meta http-equiv="Content-Security-Policy" content="default-src '\''self'\''; font-src * data:; style-src '\''self'\'' '\''unsafe-inline'\'' https://cdn.tailwindcss.com; script-src '\''self'\'' '\''unsafe-inline'\'' '\''unsafe-eval'\'' https://cdn.tailwindcss.com; img-src '\''self'\'' data:;" />\n    <meta name="description"|' release/deploy/index.html
        
        # Add canonical URL
        sed -i 's|</head>|    <link rel="canonical" href="https://drew-834.github.io/TeamArena/" />\n</head>|' release/deploy/index.html
        
        # Add system fonts instead of Google Fonts
        sed -i 's|</head>|    <style>\n      body { font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol"; }\n    </style>\n</head>|' release/deploy/index.html
        
        # Enhance SPA routing script
        sed -i '/window.history.replaceState/i\                // Also handle deep linking to SPA routes\n                if (window.location.pathname.includes("/character/")) {\n                  var route = window.location.pathname;\n                  window.history.replaceState(null, null, "/TeamArena/" + route.split("/character/")[1]);\n                }' release/deploy/index.html
        
        # Make sure app.js is loaded before the blazor framework
        sed -i 's|<script src="_framework/blazor.webassembly.js"></script>|<script src="js/app.js"></script>\n    <script src="_framework/blazor.webassembly.js"></script>|' release/deploy/index.html
        
        # Check the changes
        grep -A 5 "Content-Security-Policy" release/deploy/index.html || echo "CSP not found"
        grep -A 2 "canonical" release/deploy/index.html || echo "Canonical link not found"
        grep -A 5 "font-family" release/deploy/index.html || echo "Font styles not found"
    
    # Apply the same changes to 404.html
    - name: Copy index.html to 404.html for SPA routing
      run: cp release/deploy/index.html release/deploy/404.html
      
    # Add .nojekyll file to tell GitHub pages not to use Jekyll processing
    - name: Add .nojekyll file
      run: touch release/deploy/.nojekyll
      
    - name: Deploy to GitHub Pages
      uses: JamesIves/github-pages-deploy-action@v4
      with:
        folder: release/deploy 